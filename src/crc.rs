use std::ops::{BitXor, Shr};

const CRC_TABLE: [u32; 256] = [
    3068778962, 3416000467, 3066364338, 26158574, 970805927, 1662025915, 2047073759, 755393509,
    2992658296, 134438595, 366006197, 1824807446, 3325271335, 1966395981, 219625731, 3007185328,
    3791837252, 3458193776, 4072777737, 2301753139, 2509294321, 49802801, 3346243809, 1528960400,
    2748272291, 276245392, 2982300355, 3174172381, 2909056463, 2086514688, 2229772922, 3991694375,
    1406160645, 3845580124, 2681138695, 4243154195, 2497627625, 3129494596, 101387467, 914151577,
    1947738808, 624592858, 4001294541, 368207370, 3913835524, 445738836, 966121085, 142291089,
    3087720857, 1628812858, 3022072028, 3523832610, 4034978822, 1029789747, 2578401970, 1585132553,
    2036375087, 3620749062, 4189059373, 4252727633, 350364320, 2548477100, 3529049091, 542098627,
    4264961747, 559566501, 2514863154, 1123317173, 1321027795, 3838906524, 835044585, 2280992904,
    1498086580, 1351759074, 2404528408, 2726270148, 3563036636, 3829631799, 89397198, 3861571695,
    3297668129, 3761276833, 3123049971, 313143304, 524006187, 1078370112, 909272518, 1796527537,
    3856221867, 4120355666, 2312929203, 1443903952, 133661666, 1484229796, 1615437542, 3081438061,
    2370186368, 1415916808, 3266788709, 3467457, 2367358988, 1041357137, 3724413940, 383330239,
    3789753806, 783212829, 503655825, 3413435847, 3037878797, 4105970373, 3991876030, 4059529505,
    1743378807, 56444163, 3481039504, 2849407824, 2657720540, 3159597898, 4231590678, 890407919,
    3930762529, 3634388067, 705792126, 1748444768, 419526912, 1806843556, 1218309381, 1269648531,
    3262962078, 2929618491, 4014734206, 2070727011, 2906800727, 2454340568, 3496917663, 1812593538,
    464189039, 1185960643, 3853584561, 670197999, 1307335696, 1631430293, 2980862056, 2711852991,
    2308689497, 683612454, 3954367402, 121588008, 3788985343, 1879108982, 3175025339, 1247068378,
    2440416544, 656880641, 4136379602, 1664038258, 1767495020, 3331055007, 2701411947, 3435378152,
    1301142942, 1334709714, 2840378955, 1315895759, 2163301907, 3283267763, 1138418983, 3382564578,
    3838889898, 2829554559, 672315857, 2011497737, 2268617531, 4104951396, 1796965231, 122053108,
    2120350866, 2748700687, 3257396677, 2939494641, 874512155, 967911516, 289720691, 1292080784,
    775323891, 4199926508, 2746751396, 2136985892, 2841035585, 768364723, 3362086751, 493974053,
    4255099852, 1337232915, 2319805744, 4059613242, 3860447433, 3896768437, 2022124013, 557616749,
    862855699, 3040940347, 357917569, 3846288071, 2299522278, 891793714, 1690041981, 670706753,
    2290812707, 285848126, 3799727239, 1387223971, 3413833485, 3871018982, 1756848881, 1178875781,
    3632571299, 414194879, 924629520, 1522355403, 4247481181, 3637212932, 2079752178, 1797016498,
    2687742057, 3351524494, 2237752843, 2895442936, 1833638496, 347658924, 817926290, 2567595821,
    1296770177, 3530719974, 150554603, 24040426, 2341050803, 4288032012, 3150067063, 2340624830,
    2395481302, 2592644361, 3989574068, 1792911459, 901610482, 1292934194, 1385648727, 3922621352,
    3930716204, 2638892672, 1874286095, 3472655278, 4086767655, 2121698421, 4029800981, 3654775465,
];

// Function CRC32
//     Input:
//         data:  Bytes     //Array of bytes
//     Output:
//         crc32: UInt32    //32-bit unsigned crc-32 value
//
// //Initialize crc-32 to starting value
// crc32 ← 0xFFFF_FFFF
//
// for each byte in data do
// nLookupIndex ← (crc32 xor byte) and 0xFF;
// crc32 ← (crc32 shr 8) xor CRCTable[nLookupIndex] //CRCTable is an array of 256 32-bit constants
//
// //Finalize the CRC-32 value by inverting all the bits
// crc32 ← crc32 xor 0xFFFF_FFFF
// return crc32

// from https://en.wikipedia.org/wiki/Cyclic_redundancy_check#CRC-32_algorithm
pub fn crc32(data: &Vec<u8>) -> u32 {
    //Initialize crc-32 to starting value
    let mut crc32: u32 = 0xFFFF_FFFF;

    for byte in data.iter() {
        let lookup_index: usize = ((crc32 ^ *byte as u32) & 0xFF) as usize;
        crc32 = (crc32 >> 8) ^ CRC_TABLE[lookup_index];
    }

    //Finalize the CRC-32 value by inverting all the bits
    crc32 = crc32 ^ 0xFFFF_FFFF;

    crc32
}
